import asyncio
import time
from datetime import datetime, timedelta

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from apps.bot.keyboards.big_parser_keyboards import products_menu_keyboards
from apps.bot.keyboards.pars_price_product_keyboards import parsing_price_keyboards, back_parsing_price_keyboards
from config import moscow_tz, regions, regions_name, regions_id
from config_bot import repo_manager
from apps.parser.entities.parser_entity import ParserName
from apps.parser.service.last_pars import get_last_pars
from apps.parser.handlers.parsing_price_products import pars_price
from apps.parser.handlers.start_big_parser import start_big_parser_products

router = Router(name="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º")


@router.callback_query(F.data == "big_parser_products_menu")
async def products_menu(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    _, products, _ = await get_last_pars(repo_manager=repo_manager)
    await callback_query.message.edit_text(
        f"–ü–∞—Ä—Å–∏–Ω–≥ –±—ã–ª {products}",
        reply_markup=products_menu_keyboards()
    )


@router.callback_query(F.data == "start_big_parsing")
async def start_parser(callback_query: types.CallbackQuery) -> None:
    await callback_query.message.edit_text(
        "–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    )

    await start_big_parser_products(callback_query)
    await callback_query.bot.send_message(chat_id=callback_query.from_user.id,
                                          text="–ë–æ–ª—å—à–æ–π –ø–∞—Ä—Å–µ—Ä –æ–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É!")
    date = datetime.now(moscow_tz).strftime("%d-%m-%Y")
    await repo_manager.parser_schedule_repo.update_last_run(parser_name=ParserName.BIG_PARSER, date=date)


# ---------------------------------------------------------------------------------------------------------------------
@router.callback_query(F.data == "parsing_price_products")
async def parsing_price_product(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    country = await repo_manager.country_price_repo.get_all_county_pars_product()
    region_text = "–†–µ–≥–∏–æ–Ω—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω:\n"
    for region in regions:
        if country.get(region):
            region_text += regions_name.get(region) + "\n"
    await callback_query.message.edit_text(text=region_text,
                                           reply_markup=parsing_price_keyboards())


@router.callback_query(F.data == "start_pars_price_product")
async def start_parsing_price_product(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback_query.message.edit_text(
        "–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω",
    )
    await callback_query.bot.send_message(chat_id=callback_query.from_user.id,
                                          text='‚úÖ–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.')
    start_time = time.time()
    links = await repo_manager.product_repo.get_url_products()
    country = await repo_manager.country_repo.get_all_county_pars_product()
    await callback_query.bot.send_message(chat_id=callback_query.from_user.id,
                                          text=f"–ù–∞—á–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω {len(links)} —Ç–æ–≤–∞—Ä–æ–≤.")

    regions_to_parse = [region for region in regions if country.get(region)]
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = [
        pars_price(links, country=regions_id.get(region))
        for region in regions_to_parse
    ]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(*tasks)

    for (region, (old_links, new_links, exception)) in zip(regions_to_parse, results):
        if not country.get(region):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å
        exception_text = "\n".join(exception)

        await callback_query.bot.send_message(
            chat_id=callback_query.from_user.id,
            text=(
                f'{regions_name.get(region)} —Å–æ–±—Ä–∞–Ω–æ {len(old_links)} —Ü–µ–Ω ‚úÖ\n'
                f'üéÆ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(new_links)}\n'
                f'‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(exception)}\n'
                f'{exception_text}'
            )
        )
    elapsed_time = int(time.time() - start_time)

    await callback_query.bot.send_message(chat_id=callback_query.from_user.id,
                                          text=f'–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n'
                                               f'üìÖ –î–∞—Ç–∞: {datetime.now(moscow_tz).strftime("%d-%m-%Y")}\n'
                                               f'‚åõÔ∏è –í—Ä–µ–º—è: {datetime.now(moscow_tz).strftime("%H:%M")}\n'
                                               f'‚è∞ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(timedelta(seconds=elapsed_time))[:-3]}')


@router.callback_query(F.data == "change_pars_product_regions")
async def start_parsing_price_product_(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    inline_keyboard = []
    country = await repo_manager.country_price_repo.get_all_county_pars_product()
    for region in regions:
        if country.get(region):

            button = InlineKeyboardButton(
                text=f'‚úÖ {regions_name.get(region)}',
                callback_data=f"change_pars_product_country:{region}"
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
            )
        else:
            button = InlineKeyboardButton(
                text=f'‚ùå {regions_name.get(region)}',
                callback_data=f"change_pars_product_country:{region}")

        inline_keyboard.append([button])
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    keyboard.inline_keyboard.extend(back_parsing_price_keyboards().inline_keyboard)

    await callback_query.message.edit_text("–†–µ–≥–∏–æ–Ω—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("change_pars_product_country:"))
async def toggle_region_product_status(callback: types.CallbackQuery, state: FSMContext) -> None:
    region = callback.data.split(":")[1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ callback_data
    country = await repo_manager.country_price_repo.get_all_county_pars_product()

    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏–æ–Ω–∞
    new_status = not country.get(region, 0)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏–æ–Ω–∞ –≤ –ë–î
    await repo_manager.country_price_repo.update_region_pars_product(region, new_status)
    country = await repo_manager.country_price_repo.get_all_county_pars_product()
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    inline_keyboard = []
    for region in regions:
        if country.get(region):  # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            button = InlineKeyboardButton(
                text=f'‚úÖ {regions_name.get(region)}',
                callback_data=f"change_pars_product_country:{region}"
            )
        else:
            button = InlineKeyboardButton(
                text=f'‚ùå {regions_name.get(region)}',
                callback_data=f"change_pars_product_country:{region}"
            )

        inline_keyboard.append([button])

    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    keyboard.inline_keyboard.extend(back_parsing_price_keyboards().inline_keyboard)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã:", reply_markup=keyboard)




