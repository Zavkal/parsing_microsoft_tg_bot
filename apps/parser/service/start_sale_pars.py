import asyncio
import logging
from datetime import datetime, timedelta
import time

from apps.parser.entities.parser_entity import ParserName
from apps.parser.handlers.parsing_links import open_page_and_scroll
from apps.parser.handlers.parsing_links_for_auto_pars import pars_link_for_auto_pars
from apps.parser.handlers.parsing_price_products import pars_price
from config import regions, regions_id, moscow_tz, ADMIN, regions_name
from config_bot import repo_manager, bot


async def start_sale_pars() -> None:
    start_time = time.time()
    sale_links = []
    links = await pars_link_for_auto_pars()
    links.extend(await repo_manager.link_yourself_repo.get_all_links_yourself())
    if len(links) > 0:
        text_response = f"‚õìÔ∏è‚Äçüí• –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂: {len(links)} ‚úÖ\n" + "\n".join(links)
        await bot.send_message(
            chat_id=ADMIN,
            text=text_response,
        )

        all_links_products = await open_page_and_scroll(links)
        sale_links += all_links_products
        country = await repo_manager.country_repo.get_all_county_pars_sale()
        await bot.send_message(chat_id=ADMIN,
                               text=f'‚õìÔ∏è‚Äçüí• –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä—ã: {len(sale_links)} ‚úÖ')
        regions_to_parse = [region for region in regions if country.get(region)]

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = [
            pars_price(sale_links, country=regions_id.get(region))
            for region in regions_to_parse
        ]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks)

        for (region, (old_links, new_links, exception)) in zip(regions_to_parse, results):
            if not country.get(region):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å

            exception_text = "\n".join(exception)
            logging.error(exception_text)

            await bot.send_message(
                chat_id=ADMIN,
                text=(
                    f'{regions_name.get(region)} —Å–æ–±—Ä–∞–Ω–æ {len(old_links)} —Ü–µ–Ω ‚úÖ\n'
                    f'üéÆ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(new_links)}\n'
                    f'‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(exception)}\n'
                )
            )

        elapsed_time = int(time.time() - start_time)
        await bot.send_message(
            chat_id=ADMIN,
            text=f'–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n'
                 f'üìÖ –î–∞—Ç–∞: {datetime.now(moscow_tz).strftime("%d-%m-%Y")}\n'
                 f'‚åõÔ∏è –í—Ä–µ–º—è: {datetime.now(moscow_tz).strftime("%H:%M")}\n'
                 f'‚è∞ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(timedelta(seconds=elapsed_time))[:-3]} –ß–ß:–ú–ú',
        )

        # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±–Ω—É–ª–∏—Ç—å –ø–æ sale_product
        await repo_manager.product_repo.set_sale_status_false_all_products()
        # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ –∞–π–¥–∏—à–Ω–∏–∫–∏ –æ–±–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂—É!
        product_ids = [link.split('/')[-2] for link in sale_links]
        await repo_manager.product_repo.set_sale_status_true_for_products(product_ids=product_ids)

    else:
        await bot.send_message(
            chat_id=ADMIN,
            text='–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ 0 —Å—Å—ã–ª–æ–∫ —Å —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ–π :(',
        )

    date = datetime.now(moscow_tz).strftime("%d-%m-%Y")
    await repo_manager.parser_schedule_repo.update_last_run(parser_name=ParserName.SALE, date=date)
