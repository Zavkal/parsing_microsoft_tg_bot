import asyncio
import time
from datetime import datetime, timedelta

from apps.parser.entities.parser_entity import ParserName
from apps.parser.handlers.parsing_price_products import pars_price
from config import ADMIN, regions_id, regions_name, moscow_tz, regions
from config_bot import repo_manager, bot


async def start_price_pars_products() -> None:
    start_time = time.time()
    links = await repo_manager.product_repo.get_url_products()
    country = await repo_manager.country_price_repo.get_all_county_pars_product()
    await bot.send_message(
        chat_id=ADMIN,
        text=f"–ù–∞—á–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω {len(links)} —Ç–æ–≤–∞—Ä–æ–≤.",
    )

    regions_to_parse = [region for region in regions if country.get(region)]
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = [
        pars_price(links, country=regions_id.get(region))
        for region in regions_to_parse
    ]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(*tasks)

    for (region, (old_links, new_links, exception)) in zip(regions_to_parse, results):
        if not country.get(region):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å
        exception_text = "\n".join(exception)

        await bot.send_message(
            chat_id=ADMIN,
            text=(
                f'{regions_name.get(region)} —Å–æ–±—Ä–∞–Ω–æ {len(old_links)} —Ü–µ–Ω ‚úÖ\n'
                f'üéÆ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(new_links)}\n'
                f'‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(exception)}\n'
                f'{exception_text}'
            )
        )
    elapsed_time = int(time.time() - start_time)
    date = datetime.now(moscow_tz).strftime("%d-%m-%Y")
    await repo_manager.parser_schedule_repo.update_last_run(parser_name=ParserName.PARS_PRICE, date=date)
    await bot.send_message(
        chat_id=ADMIN,
        text=f'–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n'
             f'üìÖ –î–∞—Ç–∞: {datetime.now(moscow_tz).strftime("%d-%m-%Y")}\n'
             f'‚åõÔ∏è –í—Ä–µ–º—è: {datetime.now(moscow_tz).strftime("%H:%M")}\n'
             f'‚è∞ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(timedelta(seconds=elapsed_time))[:-3]}',
    )
