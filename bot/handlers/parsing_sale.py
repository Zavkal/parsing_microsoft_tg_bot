from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.config import regions, regions_name
from bot.keyboards.parsing_sale_keyboards import parsing_sale_keyboards, back_parsing_sale_keyboards
from bot.keyboards.sale_keyboards import base_sale_keyboards
from database.db_bot import get_all_county_pars, update_region_pars

router = Router(name="–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏")


@router.callback_query(F.data == "parsing_sale")
async def parsing_sale_(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(text=f"–†–µ–≥–∏–æ–Ω—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω:"
                                                f"üá∫üá∏ –°—à–∞"
                                                f"üá≥üá¨ –ù–∏–≥–µ—Ä–∏—è"
                                                f"üá™üá¨ –ï–≥–∏–ø–µ—Ç"
                                                f"üá¶üá∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞"
                                                f"üáπüá∑ –¢—É—Ä—Ü–∏—è"
                                                f"üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞",
                                              reply_markup=parsing_sale_keyboards())


@router.callback_query(F.data == "start_parsing_sale")
async def start_parsing_sale_(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()


@router.callback_query(F.data == "change_pars_regions")
async def start_parsing_sale_(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    inline_keyboard = []
    country = get_all_county_pars()
    for region in regions:
        if country.get(region):

            button = InlineKeyboardButton(
                text=f'‚úÖ {regions_name.get(region)}',
                callback_data=f"change_pars_country:{region}"
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
            )
        else:
            button = InlineKeyboardButton(
                text=f'‚ùå {regions_name.get(region)}',
                callback_data=f"change_pars_country:{region}")

        inline_keyboard.append([button])
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    keyboard.inline_keyboard.extend(back_parsing_sale_keyboards().inline_keyboard)

    await callback_query.message.edit_text("–†–µ–≥–∏–æ–Ω—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("change_pars_country:"))
async def toggle_region_status(callback: types.CallbackQuery):
    region = callback.data.split(":")[1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ callback_data
    country = get_all_county_pars()

    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏–æ–Ω–∞
    new_status = not country.get(region, 0)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏–æ–Ω–∞ –≤ –ë–î
    update_region_pars(region, new_status)
    country = get_all_county_pars()
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    inline_keyboard = []
    for region in regions:
        if country.get(region):  # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            button = InlineKeyboardButton(
                text=f'‚úÖ {regions_name.get(region)}',
                callback_data=f"change_pars_country:{region}"
            )
        else:
            button = InlineKeyboardButton(
                text=f'‚ùå {regions_name.get(region)}',
                callback_data=f"change_pars_country:{region}"
            )

        inline_keyboard.append([button])

    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    keyboard.inline_keyboard.extend(back_parsing_sale_keyboards().inline_keyboard)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã:", reply_markup=keyboard)


@router.callback_query(F.data == "output_data_sale")
async def output_data_sale(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(text=f"‚åõÔ∏è –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –±—ã–ª: 03.01.2025 –≤ 15:30",
                                              reply_markup=base_sale_keyboards())


